<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PL/SQL on Ottmar’s Notes</title>
    <link>https://ogobrecht.com/tags/pl/sql/</link>
    <description>Recent content in PL/SQL on Ottmar’s Notes</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</managingEditor>
    <webMaster>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</webMaster>
    <lastBuildDate>Fri, 08 Oct 2021 13:00:00 +0000</lastBuildDate>
    <atom:link href="https://ogobrecht.com/tags/pl/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yet another Oracle DB logging tool: Console</title>
      <link>https://ogobrecht.com/posts/2021-10-04-yet-another-oracle-db-logging-tool-console/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><author>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</author>
      <guid>https://ogobrecht.com/posts/2021-10-04-yet-another-oracle-db-logging-tool-console/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;&#xA;&lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#a-single-install-script&#34;&gt;A single install script&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#production-safe-without-further-configuration&#34;&gt;Production safe without further configuration&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#method-names-based-on-javascript-console&#34;&gt;Method names based on JavaScript Console&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#reduced-amount-of-log-entries-through-saved-call-stack&#34;&gt;Reduced amount of log entries through saved call stack&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#simple-logging-of-method-parameters&#34;&gt;Simple logging of method parameters&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#markdown-format-for-automatically-determined-metadata&#34;&gt;Markdown format for automatically determined metadata&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#extensible-logs-through-overloaded-log-methods&#34;&gt;Extensible logs through overloaded log methods&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#measure-time-and-count-things&#34;&gt;Measure time and count things&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#assert-format-and-other-helpers&#34;&gt;Assert, format and other helpers&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#displaying-the-package-status-of-console-in-a-session&#34;&gt;Displaying the package status of Console in a session&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#apex-error-handling-function&#34;&gt;APEX Error Handling Function&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#apex-plug-in-for-capturing-frontend-errors&#34;&gt;APEX Plug-in for capturing frontend errors&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#sources-of-inspiration&#34;&gt;Sources of inspiration&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#project-homepage&#34;&gt;Project homepage&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;It looks like it is a hobby of PL/SQL developers to develop their own logging tool. There are already some free tools on the market and probably many that have never been released (&lt;a href=&#34;https://www.doag.org/formes/pubfiles/10101682/2018-SQLPLSQL-Sabine_Heimsath-PL_SQL__Monitoren__gt__Messen__gt__Optimieren_-_mit_Open_Source-Praesentation.pdf&#34;&gt;DOAG talk by Sabine Heimsath on the topic&lt;/a&gt;):&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Version of Oracle Table API Generator Available</title>
      <link>https://ogobrecht.com/posts/2020-12-26-new-version-of-oracle-table-api-generator-available/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate><author>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</author>
      <guid>https://ogobrecht.com/posts/2020-12-26-new-version-of-oracle-table-api-generator-available/</guid>
      <description>&lt;p&gt;Short before Christmas André and I released version 0.6.0 of our &lt;a href=&#34;https://github.com/OraMUC/table-api-generator&#34;&gt;table API generator&lt;/a&gt;. The last release was exactly two years ago - time flies. This blog post highlights some of the changes - the &lt;a href=&#34;https://github.com/OraMUC/table-api-generator/blob/master/docs/changelog.md#060-2020-12-20&#34;&gt;complete changelog is available on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt;&#xA;&lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#bulk-processing&#34;&gt;Bulk Processing&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#support-for-audit-columns&#34;&gt;Support for Audit Columns&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#support-for-a-row-version-column&#34;&gt;Support for a Row Version Column&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#tenant-support&#34;&gt;Tenant Support&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#more&#34;&gt;More&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#breaking-changes&#34;&gt;Breaking Changes&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&#xA;&lt;h2 id=&#34;bulk-processing&#34;&gt;Bulk Processing&lt;/h2&gt;&#xA;&lt;p&gt;When you split your app over multiple schemas for higher data security you might need at some point the possibility to bulk process your data. Imagine the following, common schema setup (also see this nice &lt;a href=&#34;https://www.youtube.com/watch?v=OF7qR5lAmiw&#34;&gt;video by Connor McDonald&lt;/a&gt;, 20 minutes):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Download BLOBs with SQL*Plus</title>
      <link>https://ogobrecht.com/posts/2020-01-01-download-blobs-with-sqlplus/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><author>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</author>
      <guid>https://ogobrecht.com/posts/2020-01-01-download-blobs-with-sqlplus/</guid>
      <description>&lt;p&gt;Have you ever tried to spool/download BLOBS with SQL*Plus? Some months ago I tried to find a way to download a collection of CLOBs or even better a zipped version of the collection as BLOB. I learned that BLOBs are not a valid datatype in SQL*Plus when it comes to the spool command. I found a way by putting the CLOBs into a global temporary table, creating an intermediate SQL script with tons of select and spool commands, and finally spooling the CLOBs one by one by calling the intermediate SQL script. It was working, but far from elegant. Also, when I was in the home office with a less powerful connection, it was slowing down the whole export process significantly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Major Version of PL/SQL Export Utilities Available</title>
      <link>https://ogobrecht.com/posts/2019-06-26-new-major-version-of-plex-available/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><author>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</author>
      <guid>https://ogobrecht.com/posts/2019-06-26-new-major-version-of-plex-available/</guid>
      <description>&lt;p&gt;PLEX is a PL/SQL package with export utilities - see &lt;a href=&#34;https://ogobrecht.github.io/posts/2018-08-26-plex-plsql-export-utilities/&#34;&gt;this post&lt;/a&gt; what it can do for you. In the past it was dependent on APEX for two reasons: The APEX_EXPORT package to allow exporting an APEX app and the APEX_ZIP package for compressing the resulting file collection to a zip file.&lt;/p&gt;&#xA;&lt;p&gt;After the first public release of PLEX, I got a comment like &amp;ldquo;Nice tool, but I don&amp;rsquo;t use APEX&amp;rdquo;. I thought I should make PLEX independent from APEX to allow at least the export of all the schema DDL and also the table data. Some weeks ago Jürgen Schuster contacted me to try out PLEX for an switch from Subversion to Git for one of his customer projects. It turns out that PLEX was not able to export the schema DDL because of errors from DBMS_METADATA regarding many Java classes. And the second issue was that one of their machines had no APEX installed. This was the final trigger for me to rework the implementation of PLEX.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PLOC - Convert PL/SQL Code into Markdown Docs</title>
      <link>https://ogobrecht.com/posts/2019-01-10-ploc-plsql-code-to-doc-converter/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><author>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</author>
      <guid>https://ogobrecht.com/posts/2019-01-10-ploc-plsql-code-to-doc-converter/</guid>
      <description>&lt;p&gt;Some months ago I had to write a README file with Markdown syntax for a PL/SQL open source project. I changed function and procedure parameters of the package often during the implementation. Therefore, maintaining the documentation was no fun in the beginning. Maybe you know this from your own (payed) projects ;-)&lt;/p&gt;&#xA;&lt;p&gt;Normally in the business world I see minimalistic comments in the code and a dedicated documentation independent of the code. As you can imagine, the latter is sometimes - let&amp;rsquo;s say &amp;ldquo;out of date&amp;rdquo;, if it exists at all &amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Table API Generator v0.5.0 Available</title>
      <link>https://ogobrecht.com/posts/2018-12-26-table-api-generator-v0.5.0-available/</link>
      <pubDate>Wed, 26 Dec 2018 00:00:00 +0000</pubDate><author>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</author>
      <guid>https://ogobrecht.com/posts/2018-12-26-table-api-generator-v0.5.0-available/</guid>
      <description>&lt;p&gt;Short before Christmas André and I released version 0.5.0 of our &lt;a href=&#34;https://github.com/OraMUC/table-api-generator&#34;&gt;PL/SQL table API generator&lt;/a&gt;. It took a long time to come to this point. One of the reasons behind was the fact that we had to rework some internals to support feature wishes from the community. Here the most important features of the new version:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Support for multicolumn primary keys&lt;/li&gt;&#xA;&lt;li&gt;Support for 12c long identifier names&lt;/li&gt;&#xA;&lt;li&gt;More control over the API features and name (10 new parameters)&lt;/li&gt;&#xA;&lt;li&gt;Insert methods:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Can have the dictionary column defaults&lt;/li&gt;&#xA;&lt;li&gt;Can return the whole row instead of the primary key&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;You can exclude columns (e.g. audit columns) for inserts and updates&lt;/li&gt;&#xA;&lt;li&gt;Improved template engine:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Generated code better readable because of formatted parameter lists&lt;/li&gt;&#xA;&lt;li&gt;Tables with many columns no longer breaking character limits&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Special methods for testing and dummy data generation&lt;/li&gt;&#xA;&lt;li&gt;Also see the &lt;a href=&#34;https://github.com/OraMUC/table-api-generator/blob/master/docs/changelog.md#050-2018-12-23&#34;&gt;full changelog on the project site&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Happy new year and happy coding :-)&lt;/p&gt;</description>
    </item>
    <item>
      <title>PLEX - PL/SQL Export Utilities</title>
      <link>https://ogobrecht.com/posts/2018-08-26-plex-plsql-export-utilities/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate><author>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</author>
      <guid>https://ogobrecht.com/posts/2018-08-26-plex-plsql-export-utilities/</guid>
      <description>&lt;p&gt;PLEX is a standalone PL/SQL package with export utilities. It was created to be able to quickstart version control for existing (APEX) apps. It currently has two main functions called &lt;strong&gt;BackApp&lt;/strong&gt; and &lt;strong&gt;Queries_to_CSV&lt;/strong&gt;. Queries_to_CSV is used by BackApp as a helper function, but its functionality is also useful as a standalone. This post is all about BackApp, which has the following features:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Export the app definition of an APEX app (splitted files and optional single SQL file)&lt;/li&gt;&#xA;&lt;li&gt;Export all ORDS modules from the current schema&lt;/li&gt;&#xA;&lt;li&gt;Export all object DDL from the current schema&lt;/li&gt;&#xA;&lt;li&gt;Export table data into CSV files&lt;/li&gt;&#xA;&lt;li&gt;Provide basic script templates for export/import of whole app for DEV, TEST and PROD&lt;/li&gt;&#xA;&lt;li&gt;Everything in a (hopefully) nice directory structure ready to use with version control&lt;/li&gt;&#xA;&lt;li&gt;Return value is a file collection of type plex.tab_export_files (it was apex_t_export_files before PLEX version 2) for further processing&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Each file in the collection is represented by a record with two columns&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;name&lt;/code&gt; of type VARCHAR2(255), which is in fact the file path&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;contents&lt;/code&gt; of type CLOB&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;You can optionally zip the file collection with the helper function &lt;code&gt;to_zip&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Also see the my previous post on &lt;a href=&#34;https://ogobrecht.github.io/posts/2018-07-25-apex-export-and-version-control&#34;&gt;how to handle the apex_t_export_files type returned by the APEX_EXPORT package with SQL*Plus&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ogobrecht/plex/releases/latest&#34;&gt;Download the latest code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Run the provided install script &lt;code&gt;plex_install.sql&lt;/code&gt; (provides compiler flags) in your desired schema - could also be a central tools schema, don&amp;rsquo;t forget &lt;code&gt;grant execute on plex to xxx&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Startup your favorite SQL Tool, connect to your app schema and fire up the following query:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backapp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_app_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yourAppId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save the resulting BLOB file under a name with the extension &lt;code&gt;.zip&lt;/code&gt; and extract it to a local directory of your choice. You will find this directory structure and files:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Markdown Reporter</title>
      <link>https://ogobrecht.com/posts/2017-01-23-markdown-reporter/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate><author>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</author>
      <guid>https://ogobrecht.com/posts/2017-01-23-markdown-reporter/</guid>
      <description>&lt;p&gt;On the APEX connect 2016 in Berlin I talked about my APEX Markdown plugin and fine art printing with the help of Pandoc and LaTeX. When I was preparing my slides and documenting a SQL query in a Markdown code block I asked myself:&lt;/p&gt;&#xA;&lt;p&gt;What, if the database is taking this Markdown code block and runs the query inside to convert it into data?&lt;/p&gt;&#xA;&lt;p&gt;And what, if I take this Markdown text with the data in the code blocks and post it to a small webservice which converts the data blocks into charts and the whole document into HTML or a LaTeX based PDF?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Table API Generator</title>
      <link>https://ogobrecht.com/posts/2016-06-10-table-api-generator/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate><author>ottmar.gobrecht@gmail.com (Ottmar Gobrecht)</author>
      <guid>https://ogobrecht.com/posts/2016-06-10-table-api-generator/</guid>
      <description>&lt;p&gt;Last year I needed for a project a simple table API, which is able to generate a generic change log - something like &amp;ldquo;show me for table xyz which column was changed when and what was the old value and what is the new one&amp;rdquo;. Only changed values should be stored and all tables should log into the same generic logging table. Sounds like we need a generator for this.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
