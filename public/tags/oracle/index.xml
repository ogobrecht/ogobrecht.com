<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oracle on Ottmar’s Notes</title>
    <link>https://ogobrecht.com/tags/oracle/</link>
    <description>Recent content in Oracle on Ottmar’s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 04 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ogobrecht.com/tags/oracle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yet another Oracle DB logging tool: Console</title>
      <link>https://ogobrecht.com/posts/2021-10-04-yet-another-oracle-db-logging-tool-console/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2021-10-04-yet-another-oracle-db-logging-tool-console/</guid>
      <description>Table of Contents Introduction A single install script Production safe without further configuration Method names based on JavaScript Console Reduced amount of log entries through saved call stack Simple logging of method parameters Markdown format for automatically determined metadata Extensible logs through overloaded log methods Measure time and count things Assert, format and other helpers Displaying the package status of Console in a session APEX Error Handling Function APEX Plug-in for capturing frontend errors Sources of inspiration Project homepage  Introduction It looks like it is a hobby of PL/SQL developers to develop their own logging tool.</description>
    </item>
    
    <item>
      <title>Create Fast Insert Scripts</title>
      <link>https://ogobrecht.com/posts/2021-01-31-create-fast-insert-scripts/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2021-01-31-create-fast-insert-scripts/</guid>
      <description>A few weeks ago I released a new version of my PLEX project. I improved the ability to export table data as insert scripts. Previously, PLEX was only able to export CSV data. The reason was that I originally developed PLEX to speed up the implementation of version control in Oracle DB projects, and the ability to export CSV data was intended to track changes in master data tables.
It turned out that a colleague of mine wanted PLEX to export insert scripts for all data in all tables for the initial deployment of a new application.</description>
    </item>
    
    <item>
      <title>New Version of Oracle Table API Generator Available</title>
      <link>https://ogobrecht.com/posts/2020-12-26-new-version-of-oracle-table-api-generator-available/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2020-12-26-new-version-of-oracle-table-api-generator-available/</guid>
      <description>Short before Christmas André and I released version 0.6.0 of our table API generator. The last release was exactly two years ago - time flies. This blog post highlights some of the changes - the complete changelog is available on GitHub.
Table of Contents Bulk Processing Support for Audit Columns Support for a Row Version Column Tenant Support More Breaking Changes Conclusion  Bulk Processing When you split your app over multiple schemas for higher data security you might need at some point the possibility to bulk process your data.</description>
    </item>
    
    <item>
      <title>How to migrate Oracle Cloud wallet into existing auto_login_local wallet</title>
      <link>https://ogobrecht.com/posts/2020-08-03-how-to-migrate-oracle-cloud-wallet-into-existing-auto-login-local-wallet/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2020-08-03-how-to-migrate-oracle-cloud-wallet-into-existing-auto-login-local-wallet/</guid>
      <description>I started to store user credentials in wallet files for higher security in SQL scripts. If you do so you should also secure the access to your wallet files on the operating system level. This is especially true for auto-login wallets from the Oracle Cloud. To increase the security a bit further you can restrict the auto-login to the local user who created the wallet. To achieve this you need to create an own wallet with orapki instead of mkstore:</description>
    </item>
    
    <item>
      <title>How to use mkstore and orapki with Oracle Instant Client</title>
      <link>https://ogobrecht.com/posts/2020-07-29-how-to-use-mkstore-and-orapki-with-oracle-instant-client/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2020-07-29-how-to-use-mkstore-and-orapki-with-oracle-instant-client/</guid>
      <description>For some years I use only the Oracle Instant Client. I had too often trouble with the full client installation on my corporate PCs under Windows, especially in the old Windows 32/64 bit times. The instant client can be used by download and extract one basic zip file and adding an entry to your path environment variable. If you want to use SQL*Plus and other tools you need to download two additional files - no drama, also without admin rights.</description>
    </item>
    
    <item>
      <title>Sample Data Sets for Oracle</title>
      <link>https://ogobrecht.com/posts/2020-05-25-sample-data-sets-for-oracle/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2020-05-25-sample-data-sets-for-oracle/</guid>
      <description>Sometimes you need only some small tables and some rows of data to play around with, to test things out. I think most of you immediately would say EMP, DEPT&amp;hellip;
Sure, but a bit more data would be nice. Ok, OE and HR schema&amp;hellip;
Sure, but I have no SYS rights on the database in my current project to install the schemas, can I have it in my current dev schema?</description>
    </item>
    
    <item>
      <title>Why I Like SQL*Plus for Deployment Scripts</title>
      <link>https://ogobrecht.com/posts/2020-01-02-why-i-like-sqlplus-for-deployment-scripts/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2020-01-02-why-i-like-sqlplus-for-deployment-scripts/</guid>
      <description>The following simplified example deployment master script is given:
setdefineoffverifyofffeedbackoffwheneversqlerrorexitsql.sqlcoderollbackspooldeployment.logpromptpromptExampleDeploymentMasterScriptprompt========================================promptStep1:Dummyfordemonstration-- normally we call here some other scripts like -- @other-script.sql promptStep2:Errortestinanonymousblockbeginraise_application_error(-20000,&amp;#39;Error test for SQL*Plus &amp;lt;&amp;gt; SQLcl comparison&amp;#39;);end;/prompt========================================promptDeploymentDone:-)promptspooloffWhen we call this in SQL*Plus (version 19.5), we get the following output (in the console and also in deployment.log) with an indication of what went wrong with our deployment:
Example Deployment Master Script========================================Step 1: Dummy for demonstrationStep 2: Error test in anonymous blockbegin*ERROR at line 1:ORA-20000: Error test for SQL*Plus &amp;lt;&amp;gt; SQLcl comparison ORA-06512: at line 2 Ok, this error message is stupid, but usually, I get some useful information here to fix my problem in the deployment script - especially when the problematic script is a bit longer&amp;hellip;</description>
    </item>
    
    <item>
      <title>Download BLOBs with SQL*Plus</title>
      <link>https://ogobrecht.com/posts/2020-01-01-download-blobs-with-sqlplus/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2020-01-01-download-blobs-with-sqlplus/</guid>
      <description>Have you ever tried to spool/download BLOBS with SQL*Plus? Some months ago I tried to find a way to download a collection of CLOBs or even better a zipped version of the collection as BLOB. I learned that BLOBs are not a valid datatype in SQL*Plus when it comes to the spool command. I found a way by putting the CLOBs into a global temporary table, creating an intermediate SQL script with tons of select and spool commands, and finally spooling the CLOBs one by one by calling the intermediate SQL script.</description>
    </item>
    
    <item>
      <title>Quick start - version control for existing Oracle projects</title>
      <link>https://ogobrecht.com/posts/2019-07-20-quick-start-version-control-for-oracle-projects/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2019-07-20-quick-start-version-control-for-oracle-projects/</guid>
      <description>Many Oracle projects still do not use version control. The reasons for this are manifold. Mostly it is assumed that the database is a safe place for the source code. With a working backup this is also correct, but in any case one loses the complete history of changes. Often in running projects there is not enough time to deal with the introduction of source code versioning, because at first sight there is no direct benefit to be seen.</description>
    </item>
    
    <item>
      <title>New Major Version of PL/SQL Export Utilities Available</title>
      <link>https://ogobrecht.com/posts/2019-06-26-new-major-version-of-plex-available/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2019-06-26-new-major-version-of-plex-available/</guid>
      <description>PLEX is a PL/SQL package with export utilities - see this post what it can do for you. In the past it was dependent on APEX for two reasons: The APEX_EXPORT package to allow exporting an APEX app and the APEX_ZIP package for compressing the resulting file collection to a zip file.
After the first public release of PLEX, I got a comment like &amp;ldquo;Nice tool, but I don&amp;rsquo;t use APEX&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>New Version of D3 Force Network Chart Available</title>
      <link>https://ogobrecht.com/posts/2019-06-09-new-version-of-d3-force-network-chart-available/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2019-06-09-new-version-of-d3-force-network-chart-available/</guid>
      <description>First of all: Thanks to the community!
From time to time someone has new ideas or questions about the D3 network chart. Some time ago I thought my D3 implementation is more or less feature complete. But in the last weeks I worked again on the code to bring in new feature wishes from the community.
The most visible one in the new version 3.1 is the ability to add labels to links - see the links between Allen, Blake and Ward in the screenshot above.</description>
    </item>
    
    <item>
      <title>PLOC - Convert PL/SQL Code into Markdown Docs</title>
      <link>https://ogobrecht.com/posts/2019-01-10-ploc-plsql-code-to-doc-converter/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2019-01-10-ploc-plsql-code-to-doc-converter/</guid>
      <description>Some months ago I had to write a README file with Markdown syntax for a PL/SQL open source project. I changed function and procedure parameters of the package often during the implementation. Therefore, maintaining the documentation was no fun in the beginning. Maybe you know this from your own (payed) projects ;-)
Normally in the business world I see minimalistic comments in the code and a dedicated documentation independent of the code.</description>
    </item>
    
    <item>
      <title>Table API Generator v0.5.0 Available</title>
      <link>https://ogobrecht.com/posts/2018-12-26-table-api-generator-v0.5.0-available/</link>
      <pubDate>Wed, 26 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2018-12-26-table-api-generator-v0.5.0-available/</guid>
      <description>Short before Christmas André and I released version 0.5.0 of our PL/SQL table API generator. It took a long time to come to this point. One of the reasons behind was the fact that we had to rework some internals to support feature wishes from the community. Here the most important features of the new version:
 Support for multicolumn primary keys Support for 12c long identifier names More control over the API features and name (10 new parameters) Insert methods:  Can have the dictionary column defaults Can return the whole row instead of the primary key   You can exclude columns (e.</description>
    </item>
    
    <item>
      <title>New Major Version of D3 Force Network Chart Available</title>
      <link>https://ogobrecht.com/posts/2018-12-02-new-major-version-of-d3-force-network-chart-available/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2018-12-02-new-major-version-of-d3-force-network-chart-available/</guid>
      <description>Since APEX version 5 was published with the Universal Theme, I was thinking that I needed something for better responsiveness of the graph. Although it was possible to configure the graph to use the DOM parent width, the responsiveness was not so good because of situations where the window size does not change (we use the window resize event to trigger the change of the width) but the available space for the graph changes.</description>
    </item>
    
    <item>
      <title>PLEX - PL/SQL Export Utilities</title>
      <link>https://ogobrecht.com/posts/2018-08-26-plex-plsql-export-utilities/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2018-08-26-plex-plsql-export-utilities/</guid>
      <description>PLEX is a standalone PL/SQL package with export utilities. It was created to be able to quickstart version control for existing (APEX) apps. It currently has two main functions called BackApp and Queries_to_CSV. Queries_to_CSV is used by BackApp as a helper function, but its functionality is also useful as a standalone. This post is all about BackApp, which has the following features:
 Export the app definition of an APEX app (splitted files and optional single SQL file) Export all ORDS modules from the current schema Export all object DDL from the current schema Export table data into CSV files Provide basic script templates for export/import of whole app for DEV, TEST and PROD Everything in a (hopefully) nice directory structure ready to use with version control Return value is a file collection of type plex.</description>
    </item>
    
    <item>
      <title>APEX_EXPORT and Version Control</title>
      <link>https://ogobrecht.com/posts/2018-07-25-apex-export-and-version-control/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2018-07-25-apex-export-and-version-control/</guid>
      <description>Since years it has been possible to export an APEX app definition with the help of APEXExport, a Java utility delivered within the APEX install zip file. There is also the possibility to split the file into its components like pages, plugins and so on. There are some blog postings available how to do this - simply ask Google. Also the Java based SQLcl has the capability to do the export of an APEX app directly.</description>
    </item>
    
    <item>
      <title>Show Today Button in APEX Datepicker</title>
      <link>https://ogobrecht.com/posts/2018-07-22-today-button-in-apex-datepicker/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2018-07-22-today-button-in-apex-datepicker/</guid>
      <description>Maxime Tremblay has already described here how to customize the datepicker.
He had to deal with missing classes after changing options. I found this week a different way to customize the datepicker without loosing classes added by APEX: Simply by setting datepicker defaults on page load before any datepicker is initialized.
In my case I wanted to enable the button panel which shows two buttons - one to go to the current month which is called Today and a second one to close the datepicker which is called Done I only wanted the today button, so I had to provide beside the JavaScript or dynamic action some CSS to hide the second one:</description>
    </item>
    
    <item>
      <title>Oracle DB 11gXE Install File Swap Check Disabler</title>
      <link>https://ogobrecht.com/posts/2017-06-13-ora11xe-install-file-swap-check-disabler/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2017-06-13-ora11xe-install-file-swap-check-disabler/</guid>
      <description>Many people have problems to install Oracle 11XE in a Docker environment because the install file checks the available swap space in the container. In a container environment this fails often - see here or here, because the swap space is optimized for the entire stack and not controlled from within the operating system of the container.
We have to disable the swap space check in the installation file. I wrote another blog post about this.</description>
    </item>
    
    <item>
      <title>Pitfalls with Oracle 11g XE and Docker on Mac OS</title>
      <link>https://ogobrecht.com/posts/2017-03-21-pitfalls-with-oracle-11g-xe-and-docker-on-mac-os/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2017-03-21-pitfalls-with-oracle-11g-xe-and-docker-on-mac-os/</guid>
      <description>Recently I tried to install Oracle XE into a docker container on Mac OS Sierra using the official docker file from Oracle. I had no luck, because the installation failed with this error message:
 This system does not meet the minimum requirements for swap space. Based on the amount of physical memory available on the system, Oracle Database 11g Express Edition requires 2048 MB of swap space. This system has 0 MB of swap space.</description>
    </item>
    
    <item>
      <title>APEX Plugin dhtmlxGantt</title>
      <link>https://ogobrecht.com/posts/2017-03-14-apex-plugin-dhtmlx-gantt/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2017-03-14-apex-plugin-dhtmlx-gantt/</guid>
      <description>Some weeks ago I was asked, if I can create a plugin for the Gantt chart library from dhtmlx.com. I had a look at the library and I thought that it should be possible.
Because all my plugin developments are free time projects it took a while. Now the first public version is available. It is based on the GPLv2 version of the library, which has a reduced set of functionality.</description>
    </item>
    
    <item>
      <title>Markdown Reporter</title>
      <link>https://ogobrecht.com/posts/2017-01-23-markdown-reporter/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2017-01-23-markdown-reporter/</guid>
      <description>On the APEX connect 2016 in Berlin I talked about my APEX Markdown plugin and fine art printing with the help of Pandoc and LaTeX. When I was preparing my slides and documenting a SQL query in a Markdown code block I asked myself:
What, if the database is taking this Markdown code block and runs the query inside to convert it into data?
And what, if I take this Markdown text with the data in the code blocks and post it to a small webservice which converts the data blocks into charts and the whole document into HTML or a LaTeX based PDF?</description>
    </item>
    
    <item>
      <title>Table API Generator</title>
      <link>https://ogobrecht.com/posts/2016-06-10-table-api-generator/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2016-06-10-table-api-generator/</guid>
      <description>Last year I needed for a project a simple table API, which is able to generate a generic change log - something like &amp;ldquo;show me for table xyz which column was changed when and what was the old value and what is the new one&amp;rdquo;. Only changed values should be stored and all tables should log into the same generic logging table. Sounds like we need a generator for this.</description>
    </item>
    
    <item>
      <title>Markdown for Oracle APEX</title>
      <link>https://ogobrecht.com/posts/2016-01-01-markdown-for-oracle-apex/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2016-01-01-markdown-for-oracle-apex/</guid>
      <description>Some years ago I implemented a task board in APEX. For commenting I used the stackexchange markdown implementation (old Google code repo), which is a pure JavaScript converter and editor and based on showdown.js.
Some months ago I had to implement an application, which should be able to have multiple editors on one page and the editors should be able to support a read only mode. Furthermore there were hard limits for the amount of text for each editor.</description>
    </item>
    
    <item>
      <title>Why a subdomain for an APEX development system is a bad idea</title>
      <link>https://ogobrecht.com/posts/2015-12-12-why-a-subdomain-for-an-apex-development-system-is-a-bad-idea/</link>
      <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2015-12-12-why-a-subdomain-for-an-apex-development-system-is-a-bad-idea/</guid>
      <description>Do you find dev.apex.mycompany.tld a nice, rememberable address? Unfortunately this will not work - at least when you use Internet Explorer (which is the standard browser in most companies) and you use the same cookie name in some or all applications to share the session across multiple applications.
What is the problem on a subdomain? Internet Explorer including version 11 has a really bad cookie implementation. If you login to your productive APEX instance under apex.</description>
    </item>
    
    <item>
      <title>D3.js Force-Directed Network Chart</title>
      <link>https://ogobrecht.com/posts/2015-02-20-d3js-force-directed-network-chart/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2015-02-20-d3js-force-directed-network-chart/</guid>
      <description>My first Oracle APEX plugin and open source project :-)
Everything started some months ago when I stumbled over this fascinating force-directed graph. I immediately had the idea to use this technology to visualize data models in APEX. My experience is, that direct after I documented a data model, this documentation is out of date. I wanted to have a live visualization of the data models. After the first implementation it turned out, that the resulting graph is also useful for other purposes and I decided to build up an APEX plugin for easier integration.</description>
    </item>
    
    <item>
      <title>Double click on APEX report row opens first link target</title>
      <link>https://ogobrecht.com/posts/2015-01-14-double-click-on-apex-report-row-opens-first-link-target/</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.com/posts/2015-01-14-double-click-on-apex-report-row-opens-first-link-target/</guid>
      <description>Do you like scanning a report for certain information and then moving the mouse to the first column to click the small link for details or a edit form? Would it be nice to double click anywhere on the row to open the first link?
With a little help of a dynamic action on page zero you have the solution for all your interactive and standard reports in your application. The only additional to do is, to find out the right selectors for your reports.</description>
    </item>
    
  </channel>
</rss>
